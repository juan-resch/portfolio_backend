// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  firstName     String
  lastName      String
  birtyday      String
  photo         String?
  email         String         @unique
  password      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime?      @default(now())
  posts         Post[]
  postReactions PostReaction[]
  works         Work[]
}

model Post {
  id          String         @id @default(uuid())
  title       String
  description String
  text        String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime?      @default(now())
  reactions   PostReaction[]
  postMedias  PostMedia[]
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String
}

model PostReaction {
  id        String    @id @default(uuid())
  type      String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @default(now())
  Post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
}

model PostMedia {
  id        String    @id @default(uuid())
  path      String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @default(now())
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    String
}

model Work {
  id          String    @id @default(uuid())
  name        String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @default(now())
  techs       Tech[]
  user        User      @relation(fields: [userId], references: [id])
  userId      String
}

model Tech {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @default(now())
  skill     Skill     @relation(fields: [skillId], references: [id])
  skillId   String
  work      Work      @relation(fields: [workId], references: [id])
  workId    String
}

model Skill {
  id        String    @id @default(uuid())
  name      String
  icon      String
  color     String
  role      String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @default(now())
  Tech      Tech[]
}
